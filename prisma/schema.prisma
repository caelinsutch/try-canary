generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
  output          = "../lib/prisma"
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  projects     Project[]
  posts        Post[]
  upvotes      PostUpvote[]
  commentUpvotes CommentUpvote[]
  comments Comment[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Project {
      id        String   @id @default(cuid())

      name     String
      logo String?


      requireAccountToVote Boolean @default(false)

      createdAt DateTime @default(now()) @map(name: "created_at")
      updatedAt DateTime @default(now()) @map(name: "updated_at")
      creatorId  String

      creator User @relation(fields: [creatorId], references: [id])

      posts Post[]

    @@map(name: "projects")
}

model Post {
      id        String   @id @default(cuid())
      title     String
      description String?

      createdAt DateTime @default(now()) @map(name: "created_at")
      updatedAt DateTime @default(now()) @map(name: "updated_at")
      creatorId  String
      projectId  String

      creator User @relation(fields: [creatorId], references: [id])
      project Project @relation(fields: [projectId], references: [id])

      images Image[]
      upvotes PostUpvote[]
      comments Comment[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  creatorId  String
  postId  String
  content String
  parent_id Int?


  post Post @relation(fields: [postId], references: [id])
  creator User @relation(fields: [creatorId], references: [id])
  Children  Comment[] @relation("Comment_Children")
  parent    Comment?  @relation("Comment_Children", fields: [parent_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  upvotes CommentUpvote[]
}

model CommentUpvote {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  creatorId  String
  commentId  Int

  creator User @relation(fields: [creatorId], references: [id])
  comment Comment @relation(fields: [commentId], references: [id])
}

// Upvote model
model PostUpvote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  creatorId  String
  postId  String

  creator User @relation(fields: [creatorId], references: [id])
  post Post @relation(fields: [postId], references: [id])

  @@unique([creatorId, postId])
	@@map("Upvote")
}

// Image model
model Image {
  id        String   @id @default(cuid())
  url       String
  createdAt DateTime @default(now()) @map(name: "created_at")
  postId    String

  post Post @relation(fields: [postId], references: [id])
}
